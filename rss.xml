<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>The Wover - Blog</title>
  <link>https://thewover.github.io/</link>
  <description>Red Teaming, .NET, and random computing topics</description>
  
  <item>
    <title>Mixed Assemblies - Crafting Flexible C++ Reflective Stagers for .NET Assemblies</title>
    <link>https://thewover.github.io/Mixed-Assemblies/</link>
    <description>TLDR: There is not only one type of CLR Injection. You can compile C++ with the /clr option to produce Mixed Assemblies, programs that contain both native and managed code. This can be used to reflectively load .NET Assemblies using native(ish) stagers.</description>
  </item>
  
  <item>
    <title>Donut v0.9.2 "Bear Claw" - JScript/VBScript/XSL/PE Shellcode and Python Bindings</title>
    <link>https://thewover.github.io/Bear-Claw/</link>
    <description>TLDR: Version v0.9.2 "Bear Claw" of Donut has been released, including shellcode generation from many new types of payloads (JScript/VBScript/XSL and unmanaged DLL/PEs), and Python bindings for dynamic shellcode generation.</description>
  </item>
  
  <item>
    <title>Donut v0.9.1 "Apple Fritter" - Dual-Mode Shellcode, AMSI, and More</title>
    <link>https://thewover.github.io/Apple-Fritter/</link>
    <description>TLDR: Version v0.9.1 “Apple Fritter” of Donut has been released, including dual-mode (AMD64+x86) shellcode, AMSI bypassing for .NET v4.8, automatic version detection of payloads, and better support for Program.Main().</description>
  </item>
  
  <item>
    <title>Donut - Injecting .NET Assemblies as Shellcode</title>
    <link>https://thewover.github.io/Introducing-Donut/</link>
    <description>TLDR: You can now inject .NET Assemblies into Windows processes using this repo: https://github.com/TheWover/donut/</description>
  </item>
  
</channel>

</rss>
